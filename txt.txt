Oui, il est tout à fait possible de télécharger plusieurs images à la fois avec Node.js. Pour cela, vous pouvez utiliser un framework comme Express en combinaison avec une bibliothèque de gestion des fichiers, comme `multer`. Voici un exemple détaillé de la façon de mettre en place cette fonctionnalité.

### Étapes pour uploader plusieurs images

1. **Installer les dépendances nécessaires**:
   Assurez-vous d'avoir Node.js et npm installés, puis créez un nouveau projet et installez `express` et `multer`.

   ```bash
   mkdir upload-images
   cd upload-images
   npm init -y
   npm install express multer
   ```

2. **Créer le serveur Express**:
   Voici un exemple de code pour un serveur Express qui gère le téléchargement de plusieurs images.

   ```javascript
   // Importer les modules nécessaires
   const express = require('express');
   const multer = require('multer');
   const path = require('path');

   // Initialiser l'application Express
   const app = express();
   const PORT = process.env.PORT || 3000;

   // Configurer multer pour stocker les fichiers téléchargés
   const storage = multer.diskStorage({
       destination: (req, file, cb) => {
           cb(null, 'uploads/'); // Dossier où les images seront enregistrées
       },
       filename: (req, file, cb) => {
           // Générer un nom de fichier unique
           cb(null, Date.now() + path.extname(file.originalname)); // Nom de fichier avec un timestamp
       }
   });

   const upload = multer({ storage: storage });

   // Middleware pour servir les fichiers statiques
   app.use('/uploads', express.static('uploads'));

   // Route pour uploader plusieurs images
   app.post('/upload', upload.array('images', 3), (req, res) => {
       // req.files contient les informations sur les fichiers téléchargés
       console.log(req.files);
       res.send('Images téléchargées avec succès !');
   });

   // Lancer le serveur
   app.listen(PORT, () => {
       console.log(`Serveur en cours d'exécution sur http://localhost:${PORT}`);
   });
   ```

3. **Créer un formulaire HTML pour l'upload**:
   Créez un fichier HTML simple pour permettre aux utilisateurs de télécharger plusieurs images.

   ```html
   <!DOCTYPE html>
   <html lang="fr">
   <head>
       <meta charset="UTF-8">
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <title>Upload d'Images</title>
   </head>
   <body>
       <h1>Upload d'Images</h1>
       <form action="/upload" method="post" enctype="multipart/form-data">
           <input type="file" name="images" multiple required />
           <button type="submit">Télécharger</button>
       </form>
   </body>
   </html>
   ```

4. **Créer le dossier pour les uploads**:
   Assurez-vous de créer un dossier `uploads` dans le répertoire de votre projet, car c'est là que les fichiers seront stockés.

   ```bash
   mkdir uploads
   ```

5. **Exécuter le serveur**:
   Lancez le serveur avec la commande suivante :

   ```bash
   node app.js
   ```

   Remplacez `app.js` par le nom de votre fichier si nécessaire.

6. **Tester l'upload**:
   Ouvrez votre navigateur et allez à `http://localhost:3000`. Vous devriez voir le formulaire d'upload. Sélectionnez jusqu'à trois images et cliquez sur le bouton pour les télécharger.

### Explication du code

- **Multer** : Cette bibliothèque gère les fichiers téléchargés via `multipart/form-data`. Vous avez configuré `multer` pour stocker les fichiers dans un dossier nommé `uploads`.
- **upload.array('images', 3)** : Cette méthode permet de télécharger plusieurs fichiers (ici jusqu'à trois) sous le champ de formulaire nommé `images`.
- **req.files** : Après l'upload, toutes les informations sur les fichiers téléchargés sont accessibles via `req.files`, ce qui vous permet de gérer les fichiers comme bon vous semble (par exemple, les sauvegarder en base de données, les redimensionner, etc.).

Avec cette configuration, vous serez en mesure de télécharger jusqu'à trois images simultanément. Vous pouvez ajuster le nombre maximum d'images en changeant le nombre dans la méthode `upload.array()`.